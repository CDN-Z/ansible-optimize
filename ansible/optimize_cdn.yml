# ---
# - hosts: localhost
#   become: yes
#   tasks:
#     - name: Ensure IP forwarding is enabled
#       ansible.posix.sysctl:
#         name: net.ipv4.ip_forward
#         value: "1"
#         state: present
#         sysctl_set: yes
#         reload: yes
---
# cdn_cache_optimization.yml
# Ansible playbook for optimizing servers as CDN caching nodes with SSD detection and configuration

- name: CDN Cache Server Optimization with SSD Detection and Configuration
  hosts: cdn_cache_servers
  become: yes
  vars:
    cache_mount_base: /var/cache/cdn
    fs_type: xfs
    cache_user: cdn-cache
    cache_group: cdn-cache
    swap_size_mb: 4096
    nginx_worker_processes: auto
    nginx_worker_connections: 65535
    tcp_max_syn_backlog: 65536
    somaxconn: 65536
    tcp_max_tw_buckets: 1440000
    tcp_fin_timeout: 15
    tcp_keepalive_time: 300
    tcp_keepalive_probes: 5
    tcp_keepalive_intvl: 15
    net_core_netdev_max_backlog: 300000
    net_core_somaxconn: 65535

  tasks:
    # System updates and essential packages
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install essential packages
      package:
        name:
          - htop
          - iotop
          - sysstat
          - nload
          - net-tools
          - iftop
          - bmon
          - tcpdump
          - dstat
          - xfsprogs
          - nvme-cli
          - nginx
          - varnish
          - prometheus-node-exporter
          - parted
          - lsblk
          - util-linux
        state: present

    # Kernel parameter tuning
    - name: Set kernel parameters for CDN cache performance
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        # Networking tuning
        - { key: "net.core.somaxconn", value: "{{ somaxconn }}" }
        - { key: "net.core.netdev_max_backlog", value: "{{ net_core_netdev_max_backlog }}" }
        - { key: "net.ipv4.tcp_max_syn_backlog", value: "{{ tcp_max_syn_backlog }}" }
        - { key: "net.ipv4.tcp_fin_timeout", value: "{{ tcp_fin_timeout }}" }
        - { key: "net.ipv4.tcp_keepalive_time", value: "{{ tcp_keepalive_time }}" }
        - { key: "net.ipv4.tcp_keepalive_probes", value: "{{ tcp_keepalive_probes }}" }
        - { key: "net.ipv4.tcp_keepalive_intvl", value: "{{ tcp_keepalive_intvl }}" }
        - { key: "net.ipv4.tcp_max_tw_buckets", value: "{{ tcp_max_tw_buckets }}" }
        - { key: "net.ipv4.ip_local_port_range", value: "1024 65535" }
        - { key: "net.ipv4.tcp_slow_start_after_idle", value: "0" }
        - { key: "net.ipv4.tcp_rmem", value: "4096 87380 16777216" }
        - { key: "net.ipv4.tcp_wmem", value: "4096 65536 16777216" }
        # VM Tuning
        - { key: "vm.swappiness", value: "10" }
        - { key: "vm.dirty_ratio", value: "5" }
        - { key: "vm.dirty_background_ratio", value: "2" }
        - { key: "vm.vfs_cache_pressure", value: "50" }
        - { key: "fs.file-max", value: "2097152" }
        - { key: "fs.nr_open", value: "2097152" }
        - { key: "fs.inotify.max_user_watches", value: "524288" }

    # Identify all SSDs on the server
    - name: Initialize SSD devices list
      set_fact:
        ssd_devices: []
        
    - name: Identify all SSD devices using Ansible facts
      set_fact:
        ssd_devices: "{{ ssd_devices + ['/dev/' + item] }}"
      loop: "{{ ansible_devices.keys() | list }}"
      when: 
        - ansible_devices[item].rotational is defined 
        - not ansible_devices[item].rotational
        - item | regex_search('^(s|v|xv)d[a-z]|nvme[0-9]n[0-9]')
    
    - name: Display detected SSD devices
      debug:
        msg: "Detected SSD devices: {{ ssd_devices }}"
        
    - name: Fail if no SSDs detected
      fail:
        msg: "No SSD devices detected on this server. CDN caching requires SSD storage."
      when: ssd_devices | length == 0

    # Create CDN cache user and group for permissions
    - name: Create CDN cache user and group
      user:
        name: "{{ cache_user }}"
        group: "{{ cache_group }}"
        system: yes
        create_home: no
        state: present

    # Process each SSD device
    - name: Process and configure each SSD device
      block:
        - name: Create mount directory for SSD
          file:
            path: "{{ cache_mount_base }}/ssd{{ idx }}"
            state: directory
            mode: '0755'
          loop: "{{ range(0, ssd_devices | length) | list }}"
          loop_control:
            loop_var: idx

        - name: Create partition on SSD
          parted:
            device: "{{ item }}"
            number: 1
            state: present
            fs_type: "{{ fs_type }}"
          loop: "{{ ssd_devices }}"
          ignore_errors: yes # Some devices might already be partitioned

        - name: Get partition name for each SSD
          shell: lsblk -no NAME "{{ item }}" | grep -v "$(basename {{ item }})" | head -1 #basename command extract the file name or the last part basename /dev/sda â†’ sda
          register: ssd_partitions
          loop: "{{ ssd_devices }}"
          changed_when: false

        - name: Create partition list
          set_fact:
            ssd_partitions_list: "{{ ssd_partitions.results | map(attribute='stdout') | map('regex_replace', '^', '/dev/') | list }}" #map command prepends 

        - name: Format each SSD partition with XFS
          filesystem:
            fstype: "{{ fs_type }}"
            dev: "{{ item }}"
            opts: "-L CDN_CACHE_{{ idx }}"
          loop: "{{ ssd_partitions_list }}"
          loop_control:
            index_var: idx
          when: item | length > 0

        - name: Mount each SSD with optimized parameters
          mount:
            path: "{{ cache_mount_base }}/ssd{{ idx }}"
            src: "{{ item }}"
            fstype: "{{ fs_type }}"
            opts: "noatime,nodiratime,discard,nobarrier"
            state: mounted
          loop: "{{ ssd_partitions_list }}"
          loop_control:
            index_var: idx
          when: item | length > 0

        - name: Set permissions on each cache directory
          file:
            path: "{{ cache_mount_base }}/ssd{{ idx }}"
            owner: "{{ cache_user }}"
            group: "{{ cache_group }}"
            mode: '0755'
            state: directory
          loop: "{{ range(0, ssd_devices | length) | list }}"
          loop_control:
            loop_var: idx
      when: ssd_devices | length > 0

    # Configure swapfile on first SSD for performance if needed
    - name: Configure swapfile on first SSD
      block:
        - name: Create a swapfile on first SSD
          command: dd if=/dev/zero of={{ cache_mount_base }}/ssd0/swapfile bs=1M count={{ swap_size_mb }}
          args:
            creates: "{{ cache_mount_base }}/ssd0/swapfile"

        - name: Set swapfile permissions
          file:
            path: "{{ cache_mount_base }}/ssd0/swapfile"
            owner: root
            group: root
            mode: '0600'

        - name: Format swapfile
          command: mkswap {{ cache_mount_base }}/ssd0/swapfile

        - name: Enable swapfile
          command: swapon {{ cache_mount_base }}/ssd0/swapfile
          ignore_errors: yes

        - name: Add swapfile to fstab
          lineinfile:
            path: /etc/fstab
            line: "{{ cache_mount_base }}/ssd0/swapfile none swap sw 0 0"
            state: present
      when: ssd_devices | length > 0

    # IO scheduler optimization for all SSDs
    - name: Set IO scheduler for all SSDs
      shell: echo none > /sys/block/{{ item | basename }}/queue/scheduler
      loop: "{{ ssd_devices }}"
      ignore_errors: yes
      when: ssd_devices | length > 0

    - name: Set read ahead for all SSDs
      shell: echo 256 > /sys/block/{{ item | basename }}/queue/read_ahead_kb
      loop: "{{ ssd_devices }}"
      ignore_errors: yes
      when: ssd_devices | length > 0

    # Configure Nginx for CDN caching
    - name: Create Nginx cache directories on each SSD
      file:
        path: "{{ cache_mount_base }}/ssd{{ idx }}/nginx_cache"
        state: directory
        owner: "{{ cache_user }}"
        group: "{{ cache_group }}"
        mode: '0755'
      loop: "{{ range(0, ssd_devices | length) | list }}"
      loop_control:
        loop_var: idx
      when: ssd_devices | length > 0
      notify: restart nginx

    - name: Configure Nginx for CDN caching
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      vars:
        ssd_cache_dirs: "{{ range(0, ssd_devices | length) | map('regex_replace', '^(.*)$', cache_mount_base + '/ssd\\1/nginx_cache') | list }}"
      notify: restart nginx

    - name: Configure Nginx default site
      template:
        src: templates/default.conf.j2
        dest: /etc/nginx/conf.d/default.conf
        owner: root
        group: root
        mode: '0644'
      vars:
        ssd_cache_dirs: "{{ range(0, ssd_devices | length) | map('regex_replace', '^(.*)$', cache_mount_base + '/ssd\\1/nginx_cache') | list }}"
      notify: restart nginx

    # Configure Varnish as additional caching layer
    - name: Create Varnish storage directories on each SSD
      file:
        path: "{{ cache_mount_base }}/ssd{{ idx }}/varnish"
        state: directory
        owner: varnish
        group: varnish
        mode: '0755'
      loop: "{{ range(0, ssd_devices | length) | list }}"
      loop_control:
        loop_var: idx
      when: ssd_devices | length > 0
      notify: restart varnish

    - name: Configure Varnish Cache
      template:
        src: templates/varnish.vcl.j2
        dest: /etc/varnish/default.vcl
        owner: root
        group: root
        mode: '0644'
      notify: restart varnish

    - name: Configure Varnish service
      template:
        src: templates/varnish.service.j2
        dest: /etc/systemd/system/varnish.service
        owner: root
        group: root
        mode: '0644'
      vars:
        varnish_storage_args: "{{ range(0, ssd_devices | length) | map('regex_replace', '^(.*)$', '-s malloc,1G -s file,' + cache_mount_base + '/ssd\\1/varnish/cache:10G') | join(' ') }}"
      notify: reload systemd

    # System resource limits for cache performance
    - name: Set system resource limits
      pam_limits:
        domain: '*'
        limit_type: "{{ item.limit_type }}"
        limit_item: "{{ item.limit_item }}"
        value: "{{ item.value }}"
      loop:
        - { limit_type: '-', limit_item: 'nofile', value: '1048576' }
        - { limit_type: '-', limit_item: 'nproc', value: '65535' }
        - { limit_type: '-', limit_item: 'memlock', value: 'unlimited' }
        - { limit_type: '-', limit_item: 'core', value: 'unlimited' }

    # Setup monitoring
    - name: Configure Prometheus Node Exporter
      template:
        src: templates/node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      notify: reload systemd

    # Enable and start services
    - name: Enable and start required services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - varnish
        - prometheus-node-exporter

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart varnish
      systemd:
        name: varnish
        state: restarted

    - name: reload systemd
      systemd:
        daemon_reload: yes

# Here's an example nginx.conf.j2 template with SSD cache support

# templates/nginx.conf.j2
# worker_processes {{ nginx_worker_processes }};
# worker_rlimit_nofile 1048576;
# pid /run/nginx.pid;
#
# events {
#     worker_connections {{ nginx_worker_connections }};
#     multi_accept on;
#     use epoll;
# }
#
# http {
#     # Basic settings
#     sendfile on;
#     tcp_nopush on;
#     tcp_nodelay on;
#     keepalive_timeout 65;
#     types_hash_max_size 2048;
#     server_tokens off;
#     
#     # Cache setup for SSDs
#     {% for cache_dir in ssd_cache_dirs %}
#     proxy_cache_path {{ cache_dir }} 
#                      levels=1:2 
#                      keys_zone=cache_{{ loop.index }}:100m
#                      inactive=24h 
#                      max_size=10g;
#     {% endfor %}
#     
#     # Other nginx configs...
# }

# Templates for other configuration files would also need to be updated to 
# work with multiple SSD devices. Each template should dynamically use the
# detected SSDs to distribute cache data appropriately.